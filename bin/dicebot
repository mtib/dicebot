#!/usr/bin/env ruby

require 'discordrb'
require 'dicebot_mtib'

$bot = Discordrb::Bot.new token: ENV["DICEBOT"], application_id: (ENV["DICEBOTID"].to_i)
$games = {}

$bot.message(start_with: "/begin") do |event|
    event.message.delete
    begin_session(event)
end

def begin_session(event)
    if !$games.include? event.channel
        $games[event.channel] = DND::Game.new channel: event.channel, master: event.user
        event.send_message "Started new Game! #{event.user.username} is the dungeon master!"
    else
        $games[event.channel].restart event.user
        event.send_message "Restarted game, #{event.user.username} is the dungeon master!"
    end
end

$bot.message(start_with: "/help") do |event|
    helptext = "**Hello, I am dicebot**\n\n"
    def helptext.add(cmd, explain)
        self << "```/#{cmd}``` #{explain}\n\n"
    end
    helptext.add("help", "to show this help")
    helptext.add("begin", "to begin a round of dnd, also takes control of the bot")
    helptext.add("roll <x>D<y>", "to publicly roll x y-sided dice")
    helptext.add("sroll <x>D<y>", "to secretly roll x y-sided dice")
    helptext.add("voice", "to (dis)allow the bot to connect to your voice channel [toggle]")
    helptext.add("vb", "shortcut for /begin and /voice")
    helptext.add("youtube", "audio playback using youtube-dl")
    helptext.add("volume <float>", "sets audio volume for next songs [0.0,1.0]")
    helptext.add("@dicebot", "will kill the bot if you are mtib")
    event.send_message helptext
    helptext
end

$bot.message(start_with: "/debug") do |event|
    event.message.delete
    if $games.include? event.channel
        event.send_message $games[event.channel].debug
    end
end

$bot.message(start_with: "/skip") do |event|
    event.message.delete
    if $games.include? event.channel
        $games[event.channel].stop_playing
        puts "#{event.user.name} skipped this song"
    end
end

$bot.message(start_with: "/vb") do |event|
    event.message.delete
    begin_session event
    voice_session event, $games[event.channel] if $games.include? event.channel
end

$bot.message(start_with: ["/code", "/c"]) do |event|
    event.message.delete
    lang = ""
    event.text.scan(/\/c.{0,3} lang=(\w*)/i) do |l|
        lang = l[0]
    end
    answ = "__**#{event.user.name}:**__\n```#{lang}\n#{event.text[event.text.index("\n")..-1].gsub!("`","'")}\n```"
    puts answ
    event.send_message answ
end

def new_command(*cmd, &block)
    cmd.map! do |x| "/#{x}" end
    $bot.message(start_with: cmd) do |event|
        event.message.delete
        if $games.include? event.channel
            block.call event, $games[event.channel]
        else
            event.send_message "No current game running: /begin"
        end
    end
end

new_command("roll") do |event, game|
    game.broadcast event.content[event.content.index(" ")..-1] << " => " << DND.roll_string(event.content).to_s
end

new_command("volume") do |event, game|
    game.set_volume event.text[/(\d*[\.,]?\d*)/]
end

def voice_session(event, game)
    if game.voice_enabled
        permission = game.voice_connect($bot)
        game.broadcast "Connection established" if permission
    end
end

new_command("voice") do |event, game|
    voice_session(event,game)
end

new_command("applause") do |event, game|
    game.play_file("#{ENV["PWD"]}/applause2.mp3")
end

# this depends on the python application youtube-dl
new_command("youtube", "y") do |event, game|
    af = "mp3"
    file = "/tmp/#{Time.now.to_f}.#{af}"
    # url = event.text[/ \S+youtu.?be\S+/]
    url = event.text[event.text.index(" ")..-1]
    event.send_message "#{event.user.name} added #{url} to the queue"
    cmd = "(youtube-dl -x --no-playlist -o #{file} --audio-quality 9 --audio-format #{af}#{url}) > /dev/null"
    system(cmd)
    begin
        game.play_file(file)
    rescue
        puts "Failed at downloading #{url}"
    end
end

new_command("sroll") do |event, game|
    if event.user == game.master
        game.secret event.content[event.content.index(" ")..-1] << " => " << DND.roll_string(event.content).to_s
    else
        event.user.pm "Only the dungeon master should use this, but here you go: #{DND.roll_string(event.content)}"
    end

end

$bot.mention(from: "mtib") do |event|
    event.send_message "I will now kill myself!"
    $bot.stop
end

puts $bot.invite_url
begin
    $bot.run
rescue Interrupt
    # this will not run, if stopped normally
    puts "Bye!"
end
