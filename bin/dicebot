#!/usr/bin/env ruby

require 'discordrb'
require 'dicebot_mtib'

@bot = Discordrb::Bot.new token: ENV['DICEBOT'],
                          application_id: ENV['DICEBOTID'].to_i
@games = {}

@bot.message(start_with: '/begin') do |event|
  event.message.delete
  begin_session(event)
end

def begin_session(event)
  con = lambda do
    if @games.include? event.channel
      @games[event.channel].restart event.user
      "Restarted game, #{event.user.username} is the dungeon master!"
    else
      @games[event.channel] = DND::Game.new channel: event.channel,
                                            master: event.user
      "Started new Game! #{event.user.username} is the dungeon master!"
    end
  end; event.send_message(con.call)
end

@bot.message(start_with: '/help') do |event|
  helptext = "**Hello, I am dicebot**\n\n"
  def helptext.add(cmd, explain)
    self << "```/#{cmd}``` #{explain}\n\n"
  end
  helptext.add('help', 'to show this help')
  helptext.add('begin',
               'to begin a round of dnd, also takes control of the bot')
  helptext.add('roll <x>D<y>', 'to publicly roll x y-sided dice')
  helptext.add('sroll <x>D<y>', 'to secretly roll x y-sided dice')
  helptext.add('voice', 'to toggle the bots voice permission')
  helptext.add('vb', 'shortcut for /begin and /voice')
  helptext.add('youtube', 'audio playback using youtube-dl')
  helptext.add('volume <float>', 'sets audio volume for next songs [0.0,1.0]')
  helptext.add('@dicebot', 'will kill the bot if you are mtib')
  event.send_message helptext
  helptext
end

@bot.message(start_with: '/debug') do |event|
  event.message.delete
  if @games.include? event.channel
    event.send_message @games[event.channel].debug
  end
end

@bot.message(start_with: '/skip') do |event|
  event.message.delete
  if @games.include? event.channel
    @games[event.channel].stop_playing
    puts "#{event.user.name} skipped this song"
  end
end

@bot.message(start_with: '/vb') do |event|
  event.message.delete
  begin_session event
  voice_session event, @games[event.channel] if @games.include? event.channel
end

@bot.message(start_with: ['/code', '/c']) do |event|
  event.message.delete
  lang = ''
  event.text.scan(%r{\/c.{0,3} lang=(\w*)}i) do |l|
    lang = l[0]
  end
  begin
    answ = event.text[event.text.index("\n")..-1].gsub('`', "'")
    answ = "__**#{event.user.name}:**__\n```#{lang}\n#{answ}\n```"
    event.send_message answ
  rescue
    event.send_message "#{event.user.name} is to stupid to hold down shift"
  end
end

def new_command(*cmd)
  cmd.map! { |x| "/#{x}" }
  @bot.message(start_with: cmd) do |event|
    event.message.delete
    if @games.include? event.channel
      yield event, @games[event.channel]
    else
      event.send_message 'No current game running: /begin'
    end
  end
end

new_command('roll') do |event, game|
  res = event.content[event.content.index(' ')..-1] << ' => '
  res << DND.roll_string(event.content).to_s
  game.broadcast res
end

VOLUME_REGEX = /\d{0,1}[\.,]{1}\d{0,}/

new_command('volume') do |event, game|
  game.volume=(event.text[VOLUME_REGEX])
end

def voice_session(_event, game)
  if game.voice_enabled
    permission = game.voice_connect(@bot)
    game.broadcast 'Connection established' if permission
  end
end

new_command('voice') do |event, game|
  voice_session(event, game)
end

new_command('applause') do |_event, game|
  game.play_file("#{ENV['PWD']}/applause2.mp3")
end

# this depends on the python application youtube-dl
new_command('youtube', 'y') do |event, game|
  begin
    url = event.text[event.text.index(' ')..-1]
    event.send_message "#{event.user.name} added #{url} to the queue"
    game.queue(url, event.user)
  rescue Interrupt
    event.send_message "Something went wrong, check #{url} for errors"
  end
end

new_command('sroll') do |event, game|
  if event.user == game.master
    pm = event.content[event.content.index(' ')..-1] << ' => '
    pm << DND.roll_string(event.content).to_s
    game.secret pm
  else
    event.user.pm "Only the dungeon master should use this, \
but here you go: #{DND.roll_string(event.content)}"
  end
end

@bot.mention(from: 'mtib') do |event|
  event.send_message 'I will now kill myself!'
  @bot.stop
end

puts @bot.invite_url
begin
  @bot.run
rescue Interrupt
  # this will not run, if stopped normally
  puts 'Bye!'
end
